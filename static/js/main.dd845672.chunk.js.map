{"version":3,"sources":["components/ContactsForm/ContactsForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.js","components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactList","contacts","onDeleteContact","className","s","TaskList","map","id","name","number","TaskList_item","TaskList_button","onClick","ContactsForm","onAddContact","useState","setName","setNumber","nameId","uuidv4","numberId","handleInputChange","e","target","value","onSubmit","preventDefault","TaskEditor","TaskEditor_label","TaskEditor_input","type","pattern","title","required","onChange","TaskEditor_button","Filter","onChangeFilter","App","setContacts","filter","setFilter","idContact","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","visibleContacts","toLowerCase","includes","searchName","contact","alert","length","event","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd845672.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactsForm_TaskEditor__1yvdy\",\"TaskEditor_label\":\"ContactsForm_TaskEditor_label__edrnl\",\"TaskEditor_input\":\"ContactsForm_TaskEditor_input__1k00o\",\"TaskEditorinput\":\"ContactsForm_TaskEditorinput__3xnFO\",\"TaskEditor_button\":\"ContactsForm_TaskEditor_button__2J_BN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__WH8Fq\",\"TaskList_item\":\"ContactList_TaskList_item__PCa_3\",\"TaskList_button\":\"ContactList_TaskList_button__IVTuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor_input\":\"Filter_TaskEditor_input__GZTfY\"};","import PropTypes from 'prop-types';\n// import React, { Component } from 'react';\nimport s from './ContactList.module.css';\n\nexport function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.TaskList}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.TaskList_item}>\n          {name} : {number}\n          <button\n            className={s.TaskList_button}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n// class ContactList extends Component {\n//   render() {\n//     const { contacts, onDeleteContact } = this.props;\n//     return (\n//       <ul className={s.TaskList}>\n//         {contacts.map(contact => (\n//           <li key={contact.id} className={s.TaskList_item}>\n//             {contact.name} : {contact.number}\n//             <button\n//               className={s.TaskList_button}\n//               onClick={() => onDeleteContact(contact.id)}\n//             >\n//               Удалить\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n// }\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n};\n\n// export default ContactList;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactsForm.module.css';\n\nexport function ContactsForm({ onAddContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = uuidv4();\n  const numberId = uuidv4();\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onAddContact({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.TaskEditor}>\n      <label id={nameId} className={s.TaskEditor_label}>\n        <input\n          className={s.TaskEditor_input}\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n      </label>\n      <label id={numberId} className={s.TaskEditor_label}>\n        <input\n          className={s.TaskEditor_input}\n          id={numberId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleInputChange}\n        />\n      </label>\n      <button className={s.TaskEditor_button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactsForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameId = uuidv4();\n//   numberId = uuidv4();\n\n//   handleInputChange = e => {\n//     const { name, value } = e.target;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.props.onAddContact({ ...this.state });\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { handleSubmit, nameId, handleInputChange, numberId } = this;\n//     const { name, number } = this.state;\n\n//     return (\n//       <form onSubmit={handleSubmit} className={s.TaskEditor}>\n//         <label id={nameId} className={s.TaskEditor_label}>\n//           <input\n//             className={s.TaskEditor_input}\n//             id={nameId}\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={name}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <label id={numberId} className={s.TaskEditor_label}>\n//           <input\n//             className={s.TaskEditor_input}\n//             id={numberId}\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={number}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <button className={s.TaskEditor_button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nContactsForm.propTypes = {\n  onAddContact: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\n// export default ContactsForm;\n","import PropTypes from 'prop-types';\n// import React, { Component } from 'react';\nimport s from './Filter.module.css';\n\nexport function Filter({ value, onChangeFilter }) {\n  return (\n    <div>\n      <h3>Find contacts by name</h3>\n      <input\n        className={s.TaskEditor_input}\n        type=\"text\"\n        value={value}\n        onChange={onChangeFilter}\n      />\n    </div>\n  );\n}\n\n// class Filter extends Component {\n//   render() {\n//     const { value, onChangeFilter } = this.props;\n//     return (\n//       <div>\n//         <h3>Find contacts by name</h3>\n//         <input\n//           className={s.TaskEditor_input}\n//           type=\"text\"\n//           value={value}\n//           onChange={e => onChangeFilter(e.target.value)}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onchangeFilter: PropTypes.func,\n};\n\n// export default Filter;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ContactList } from './components/ContactList/ContactList';\nimport { ContactsForm } from './components/ContactsForm/ContactsForm';\nimport { Filter } from './components/Filter/Filter';\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  const idContact = uuidv4();\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    const searchName = contacts.map(contact => contact.name).includes(name);\n\n    if (searchName) {\n      alert(`${name} is already in contacts`);\n    } else if (name.length === 0) {\n      alert('Fields must be filled!');\n    } else {\n      const contact = {\n        id: idContact,\n        name,\n        number,\n      };\n      setContacts([...contacts, contact]);\n    }\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = event => {\n    setFilter(event.target.value);\n  };\n\n  const visibleContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase()),\n  );\n  // class App extends Component {\n  //   state = {\n  //     contacts: [\n  //       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //     ],\n  //     filter: '',\n  //   };\n\n  //   componentDidMount() {\n  //     const contacts = localStorage.getItem('contacts');\n  //     const parsedContacts = JSON.parse(contacts);\n\n  //     if (parsedContacts) {\n  //       this.setState({ contacts: parsedContacts });\n  //     }\n  //   }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // addContact = event => {\n  //   const searchName = this.state.contacts\n  //     .map(contact => contact.name)\n  //     .includes(event.name);\n\n  //   if (searchName) {\n  //     alert(`${event.name} is already in contacts`);\n  //   } else if (event.name.length === 0) {\n  //     alert('Fields must be filled!');\n  //   } else {\n  //     const contact = {\n  //       ...event,\n  //       id: uuidv4(),\n  //     };\n\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [...contacts, contact],\n  //     }));\n  //   }\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n\n  // changeFilter = filter => {\n  //   this.setState({ filter });\n  // };\n\n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n\n  //   return contacts.filter(contacts =>\n  //     contacts.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactsForm onAddContact={addContact} />\n\n      <h2>Contacts</h2>\n\n      {visibleContacts.length >= 1 && (\n        <Filter value={filter} onChangeFilter={changeFilter} />\n      )}\n\n      <ContactList contacts={visibleContacts} onDeleteContact={deleteContact} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}