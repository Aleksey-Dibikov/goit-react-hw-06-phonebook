{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactsForm/ContactsForm.module.css","redux/contacts-reducer.js","redux/store.js","components/ContactList/ContactList.js","redux/contacts-actions.js","components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","contacts","id","name","number","contactReducer","combineReducers","state","type","payload","filter","contact","store","createStore","composeWithDevTools","ContactList","onDeleteContact","className","s","TaskList","map","TaskList_item","TaskList_button","onClick","connect","dispatch","onDelete","deleteContact","ContactsForm","nameId","uuidv4","numberId","handleInputChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","onAdd","this","onSubmit","TaskEditor","TaskEditor_label","TaskEditor_input","pattern","title","required","onChange","TaskEditor_button","Component","addContact","Filter","onChangeFilter","App","useState","setContacts","setFilter","idContact","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","visibleContacts","toLowerCase","includes","searchName","alert","length","event","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02ebd046.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__WH8Fq\",\"TaskList_item\":\"ContactList_TaskList_item__PCa_3\",\"TaskList_button\":\"ContactList_TaskList_button__IVTuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor_input\":\"Filter_TaskEditor_input__GZTfY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactsForm_TaskEditor__1yvdy\",\"TaskEditor_label\":\"ContactsForm_TaskEditor_label__edrnl\",\"TaskEditor_input\":\"ContactsForm_TaskEditor_input__1k00o\",\"TaskEditorinput\":\"ContactsForm_TaskEditorinput__3xnFO\",\"TaskEditor_button\":\"ContactsForm_TaskEditor_button__2J_BN\"};","import { combineReducers } from \"redux\";\r\n\r\nconst contacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst contactList = (state = contacts, { type, payload }) => {\r\n  switch (type) {\r\n    case 'contact/add':\r\n      return [\r\n        ...state, payload\r\n      ]\r\n    case 'contact/delete':\r\n      return state.filter(contact => contact.id !== payload.id);\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst contactFilter = (state = '', action) => {\r\n    return state;\r\n}\r\n\r\nexport const contactReducer = combineReducers({\r\n    contacts: contactList,\r\n    filter: contactFilter,\r\n});","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {contactReducer} from \"./contacts-reducer\";\r\n\r\nconst store = createStore(contactReducer, composeWithDevTools());\r\n\r\nexport default store;","import {React, Component} from 'react';\nimport PropTypes from 'prop-types';\n// import React, { Component } from 'react';\nimport s from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts-actions';\n\nexport function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.TaskList}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.TaskList_item}>\n          {name} : {number}\n          <button\n            className={s.TaskList_button}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n// class ContactList extends Component {\n//   render() {\n//     const { contacts, onDeleteContact } = this.props;\n//     return (\n//       <ul className={s.TaskList}>\n//         {contacts.map(contact => (\n//           <li key={contact.id} className={s.TaskList_item}>\n//             {contact.name} : {contact.number}\n//             <button\n//               className={s.TaskList_button}\n//               onClick={() => onDeleteContact(contact.id)}\n//             >\n//               Удалить\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n// }\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n};\n\n// export default ContactList;\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onDelete: (id) => dispatch(deleteContact(id))\n  }\n};\n\nexport default connect(null, mapDispatchToProps)(ContactList)","export const addContact = (contact) => ({\r\n    type: 'contact/add',\r\n    payload: contact,\r\n});\r\n\r\nexport const deleteContact = (id) => ({\r\n    type: 'contact/delete',\r\n    payload: {id},\r\n}); ","import {React, Component} from 'react';\nimport PropTypes from 'prop-types';\n// import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { addContact} from '../../redux/contacts-actions';\nimport s from './ContactsForm.module.css';\n\n// function ContactsForm({ onAddContact }) {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const nameId = uuidv4();\n//   const numberId = uuidv4();\n\n//   const handleInputChange = e => {\n//     const { name, value } = e.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n\n//       default:\n//         break;\n//     }\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     onAddContact({ name, number });\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit} className={s.TaskEditor}>\n//       <label id={nameId} className={s.TaskEditor_label}>\n//         <input\n//           className={s.TaskEditor_input}\n//           id={nameId}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//           value={name}\n//           onChange={handleInputChange}\n//         />\n//       </label>\n//       <label id={numberId} className={s.TaskEditor_label}>\n//         <input\n//           className={s.TaskEditor_input}\n//           id={numberId}\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//           value={number}\n//           onChange={handleInputChange}\n//         />\n//       </label>\n//       <button className={s.TaskEditor_button} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// }\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameId = uuidv4();\n  numberId = uuidv4();\n\n  handleInputChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    }\n    this.props.onAddContact({ ...this.state });\n    this.props.onAdd(contact)\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { handleSubmit, nameId, handleInputChange, numberId } = this;\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={handleSubmit} className={s.TaskEditor}>\n        <label id={nameId} className={s.TaskEditor_label}>\n          <input\n            className={s.TaskEditor_input}\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleInputChange}\n          />\n        </label>\n        <label id={numberId} className={s.TaskEditor_label}>\n          <input\n            className={s.TaskEditor_input}\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleInputChange}\n          />\n        </label>\n        <button className={s.TaskEditor_button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  onAddContact: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\n// export default ContactsForm;\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAdd: (contact) => dispatch(addContact(contact)),\n  }\n};\n\nexport default connect(null, mapDispatchToProps)(ContactsForm)\n","import PropTypes from 'prop-types';\n// import React, { Component } from 'react';\nimport s from './Filter.module.css';\n\nexport function Filter({ value, onChangeFilter }) {\n  return (\n    <div>\n      <h3>Find contacts by name</h3>\n      <input\n        className={s.TaskEditor_input}\n        type=\"text\"\n        value={value}\n        onChange={onChangeFilter}\n      />\n    </div>\n  );\n}\n\n// class Filter extends Component {\n//   render() {\n//     const { value, onChangeFilter } = this.props;\n//     return (\n//       <div>\n//         <h3>Find contacts by name</h3>\n//         <input\n//           className={s.TaskEditor_input}\n//           type=\"text\"\n//           value={value}\n//           onChange={e => onChangeFilter(e.target.value)}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onchangeFilter: PropTypes.func,\n};\n\n// export default Filter;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ContactList } from './components/ContactList/ContactList';\nimport ContactsForm from './components/ContactsForm/ContactsForm';\nimport { Filter } from './components/Filter/Filter';\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  const idContact = uuidv4();\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    const searchName = contacts.map(contact => contact.name).includes(name);\n\n    if (searchName) {\n      alert(`${name} is already in contacts`);\n    } else if (name.length === 0) {\n      alert('Fields must be filled!');\n    } else {\n      const contact = {\n        id: idContact,\n        name,\n        number,\n      };\n      setContacts([...contacts, contact]);\n    }\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = event => {\n    setFilter(event.target.value);\n  };\n\n  const visibleContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase()),\n  );\n  // class App extends Component {\n  //   state = {\n  //     contacts: [\n  //       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //     ],\n  //     filter: '',\n  //   };\n\n  //   componentDidMount() {\n  //     const contacts = localStorage.getItem('contacts');\n  //     const parsedContacts = JSON.parse(contacts);\n\n  //     if (parsedContacts) {\n  //       this.setState({ contacts: parsedContacts });\n  //     }\n  //   }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // addContact = event => {\n  //   const searchName = this.state.contacts\n  //     .map(contact => contact.name)\n  //     .includes(event.name);\n\n  //   if (searchName) {\n  //     alert(`${event.name} is already in contacts`);\n  //   } else if (event.name.length === 0) {\n  //     alert('Fields must be filled!');\n  //   } else {\n  //     const contact = {\n  //       ...event,\n  //       id: uuidv4(),\n  //     };\n\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [...contacts, contact],\n  //     }));\n  //   }\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n\n  // changeFilter = filter => {\n  //   this.setState({ filter });\n  // };\n\n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n\n  //   return contacts.filter(contacts =>\n  //     contacts.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactsForm onAddContact={addContact} />\n\n      <h2>Contacts</h2>\n\n      {visibleContacts.length >= 1 && (\n        <Filter value={filter} onChangeFilter={changeFilter} />\n      )}\n\n      <ContactList contacts={visibleContacts} onDeleteContact={deleteContact} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}> \n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}